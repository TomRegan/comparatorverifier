<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Comparator Verifier</title><link>https://tomregan.github.io/comparatorverifier/</link><description>Recent content on Comparator Verifier</description><generator>Hugo</generator><language>en</language><atom:link href="https://tomregan.github.io/comparatorverifier/index.xml" rel="self" type="application/rss+xml"/><item><title>Configuration Options</title><link>https://tomregan.github.io/comparatorverifier/docs/configuration-options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tomregan.github.io/comparatorverifier/docs/configuration-options/</guid><description>Configuration Options # Options can be set using the fluent API. Some options are also available to be set in comparator-verifier.properties which should be on the test classpath, e.g. in src/test/resources. Using the API sets values on a per-test basis, whereas setting a value in the properties file provides a default value for all tests. Values set in via the API will override values in the properties file.
withExamples(T first, T second, T.</description></item><item><title>Warnings Explained</title><link>https://tomregan.github.io/comparatorverifier/docs/warnings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tomregan.github.io/comparatorverifier/docs/warnings/</guid><description>Warnings Explained # This page outlines various warnings that may arise when verifying the correctness of a Comparator implementation. Each warning corresponds to a specific contractual property that a well-implemented comparator should uphold.
ANTI_SYMMETRY # A comparator violates anti-symmetry if it returns inconsistent results when the order of its arguments is reversed. Specifically, for any objects x and y, if compare(x, y) &amp;lt; 0, then compare(y, x) should return a value greater than 0.</description></item><item><title/><link>https://tomregan.github.io/comparatorverifier/_index.bg/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tomregan.github.io/comparatorverifier/_index.bg/</guid><description>Първи стъпки # Comparator Verifier е fluent API за тестване дали имплементацията на Comparator спазва изисквания договор.
С Maven # Добавете comparatorverifier към вашия pom.xml.
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.github.tomregan&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;comparatorverifier&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;x.y.x&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; С Gradle # Добавете comparatorverifier към вашия файл build.gradle.
С Groovy DSL # dependencies { testImplementation &amp;#39;io.github.tomregan:comparatorverifier:x.y.x&amp;#39; } С Kotlin DSL # dependencies { testImplementation(&amp;#34;io.github.tomregan:comparatorverifier:x.y.x&amp;#34;) } С JUnit # Напишете unit тест за вашия компаратор.
import co.mp.ComparatorVerifier; import org.</description></item><item><title/><link>https://tomregan.github.io/comparatorverifier/docs/configuration-options.bg/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tomregan.github.io/comparatorverifier/docs/configuration-options.bg/</guid><description>Опции за конфигурация # Опциите могат да бъдат зададени чрез fluent API. Някои опции също са налични за задаване в comparator-verifier.properties, който трябва да бъде в тестовия classpath, например в src/test/resources. Използването на API задава стойности на база на тест, докато задаването на стойност в properties файла предоставя стойност по подразбиране за всички тестове. Стойности, зададени чрез API, ще презапишат стойностите в properties файла.
withExamples(T first, T second, T... rest) # Предоставя явни примери за верификация.</description></item><item><title/><link>https://tomregan.github.io/comparatorverifier/docs/warnings.bg/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tomregan.github.io/comparatorverifier/docs/warnings.bg/</guid><description>Обяснение на предупрежденията # Тази страница описва различни предупреждения, които могат да възникнат при проверка на коректността на имплементация на Comparator. Всяко предупреждение съответства на конкретно договорно свойство, което добре имплементиран компаратор трябва да спазва.
ANTI_SYMMETRY # Компаратор нарушава анти-симетрията, ако връща несъвместими резултати при обръщане на реда на аргументите му. По-конкретно, за всякакви обекти x и y, ако compare(x, y) &amp;lt; 0, тогава compare(y, x) трябва да върне стойност по-голяма от 0.</description></item></channel></rss>
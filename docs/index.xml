<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docs on Comparator Verifier</title><link>https://comparatorverifier.github.io/docs/</link><description>Recent content in Docs on Comparator Verifier</description><generator>Hugo</generator><language>en-gb</language><atom:link href="https://comparatorverifier.github.io/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Configuration Options</title><link>https://comparatorverifier.github.io/docs/configuration-options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://comparatorverifier.github.io/docs/configuration-options/</guid><description>Configuration Options # withExamples(T first, T second, T... rest) # Provides explicit examples for verification. At least two examples are required.
withGeneratedExamples(int count) # Automatically generates examples for verification.
strict() # Enables strict verification. The following checks are included:
Warning.SERIALIZABLE permissive() # Enables permissive verification, excluding the following checks:
Warning.CONSISTENT_WITH_EQUALS Warning.SERIALIZABLE suppress(Warning first, Warning... rest) # Suppresses specific warnings during verification.
verify() # Runs the verification process and throws an exception if validation fails.</description></item><item><title>Warnings Explained</title><link>https://comparatorverifier.github.io/docs/warnings-explained/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://comparatorverifier.github.io/docs/warnings-explained/</guid><description>Warnings Explained # This page outlines various warnings that may arise when verifying the correctness of a Comparator implementation. Each warning corresponds to a specific contractual property that a well-implemented comparator should uphold.
ANTI_SYMMETRY # A comparator violates anti-symmetry if it returns inconsistent results when the order of its arguments is reversed. Specifically, for any objects x and y, if compare(x, y) &amp;lt; 0, then compare(y, x) should return a value greater than 0.</description></item></channel></rss>